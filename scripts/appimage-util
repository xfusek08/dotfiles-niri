#!/usr/bin/env zsh

source "$SCRIPT_FNS/log.zsh"

# Function: _parse_arguments
# Description: Parses and validates command-line arguments
# Parameters:
#   - $@: All command-line arguments
# Returns:
#   - 0 if arguments are valid, 1 otherwise
#   - Sets global variables APPIMAGE_ACTION, APPIMAGE_APP_NAME, APPIMAGE_URL
function _parse_arguments() {
    local action=""
    local app_name=""
    local appimage_url=""

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -i | --install)
                action="install"
                shift
                ;;
            -u | --uninstall)
                action="uninstall"
                shift
                ;;
            -h | --help)
                echo "Usage: appimage-util [options] <app-name> [appimage-url]"
                echo "Options:"
                echo "  -i, --install     Install an AppImage"
                echo "  -u, --uninstall   Uninstall an AppImage"
                echo "  -h, --help        Show this help message"
                echo ""
                echo "Examples:"
                echo "  appimage-util -i my-app https://example.com/myapp.AppImage"
                echo "  appimage-util -u my-app"
                exit 0
                ;;
            -*)
                log -e "Unknown option: $1"
                return 1
                ;;
            *)
                if [[ -z "$app_name" ]]; then
                    app_name="$1"
                elif [[ "$action" == "install" && -z "$appimage_url" ]]; then
                    appimage_url="$1"
                else
                    log -e "Unexpected argument: $1"
                    return 1
                fi
                shift
                ;;
        esac
    done

    # Validate arguments
    if [[ -z "$action" ]]; then
        log -e "No action specified. Use -i to install or -u to uninstall."
        return 1
    fi

    if [[ -z "$app_name" ]]; then
        log -e "No app name specified."
        return 1
    fi

    if [[ "$action" == "install" && -z "$appimage_url" ]]; then
        log -e "No AppImage URL specified for installation."
        return 1
    fi

    # Export variables for use in main function
    APPIMAGE_ACTION="$action"
    APPIMAGE_APP_NAME="$app_name"
    APPIMAGE_URL="$appimage_url"

    return 0
}

# Function: _setup_appimage_paths
# Description: Sets up all paths needed for AppImage installation
# Parameters:
#   - app_name: Name of the application
# Returns:
#   - Sets global path variables
function _setup_appimage_paths() {
    local app_name="$1"

    # Set global directory variables
    appimages_dir="$HOME/.local/appimages"
    app_dir="${appimages_dir}/${app_name}"
    local_bin_dir="$HOME/.local/bin"
    applications_dir="$HOME/.local/share/applications"

    # Set file path variables
    appimage_path="${app_dir}/${app_name}.AppImage"
    launcher_path="${app_dir}/${app_name}-launcher.sh"
    desktop_path="${app_dir}/${app_name}.desktop"

    # Set symlink variables
    launcher_symlink="${local_bin_dir}/${app_name}"
    desktop_symlink="${applications_dir}/${app_name}.desktop"
}

# Function: _create_launcher_script
# Description: Creates a launcher script for the AppImage
# Parameters:
#   - app_name: Name of the application
#   - app_dir: Directory where application files are stored
#   - appimage_path: Path to the installed AppImage
# Returns:
#   - 0 if successful, 1 otherwise
function _create_launcher_script() {
    local app_name="$1"
    local app_dir="$2"
    local appimage_path="$3"
    local launcher_path="${app_dir}/${app_name}-launcher.sh"

    log -i "Creating launcher script at ${launcher_path}"

    cat > "$launcher_path" << EOF
#!/bin/bash
# Launcher for ${app_name} AppImage
exec "${appimage_path}" "\$@"
EOF

    chmod +x "$launcher_path"

    if [[ $? -ne 0 ]]; then
        log -e "Failed to create launcher script"
        return 1
    fi

    return 0
}

# Function: _create_desktop_file
# Description: Creates a desktop file for the application
# Parameters:
#   - app_name: Name of the application
#   - app_dir: Directory where application files are stored
#   - icon: Icon to use for the application
#   - exec_path: Path to the executable
# Returns:
#   - 0 if successful, 1 otherwise
function _create_desktop_file() {
    local app_name="$1"
    local app_dir="$2"
    local icon="$3"
    local exec_path="$4"

    log -i "Creating desktop file at ${desktop_path}"

    cat > "$desktop_path" << EOF
[Desktop Entry]
Name=${app_name^}
Comment=${app_name^} Application
Exec=${exec_path} %F
Icon=${icon}
Terminal=false
Type=Application
Categories=Utility;
EOF

    if [[ $? -ne 0 ]]; then
        log -e "Failed to create desktop file"
        return 1
    fi

    return 0
}

# Function: _download_appimage
# Description: Downloads an AppImage from the provided URL
# Parameters:
#   - app_name: Name of the application
#   - appimage_url: URL to download the AppImage from
#   - app_dir: Directory where application files are stored
# Returns:
#   - Path to the downloaded AppImage if successful, 1 otherwise
function _download_appimage() {
    local app_name="$1"
    local appimage_url="$2"
    local app_dir="$3"
    local appimage_path="${app_dir}/${app_name}.AppImage"

    log -i "Downloading AppImage from ${appimage_url}"

    if curl -L -o "$appimage_path" "$appimage_url"; then
        chmod +x "$appimage_path"
        log -i "AppImage downloaded to ${appimage_path}"
        echo "$appimage_path"
    else
        log -e "Failed to download AppImage"
        return 1
    fi
}

# Function: _extract_appimage_content
# Description: Extracts the contents of an AppImage
# Parameters:
#   - appimage_path: Path to the AppImage file
#   - extract_dir: Directory where contents should be extracted
# Returns:
#   - 0 if successful, 1 otherwise
function _extract_appimage_content() {
    local appimage_path="$1"
    local extract_dir="$2"

    # Make AppImage executable if not already
    chmod +x "$appimage_path"

    # Move to the extract directory
    pushd "$extract_dir" > /dev/null

    # Extract the AppImage
    "$appimage_path" --appimage-extract > /dev/null 2>&1
    local result=$?

    if [[ $result -ne 0 || ! -d "squashfs-root" ]]; then
        log -e "Failed to extract AppImage contents"
        popd > /dev/null
        return 1
    fi

    popd > /dev/null
    return 0
}

# Function: _ensure_desktop_file
# Description: Finds or creates a desktop file for the application
# Parameters:
#   - app_name: Name of the application
#   - appimage_path: Path to the installed AppImage
#   - extract_dir: Directory containing extracted AppImage contents
# Returns:
#   - 0 if successful, 1 otherwise
function _ensure_desktop_file() {
    local app_name="$1"
    local appimage_path="$2"
    local extract_dir="$3"

    # Try to find desktop file in extracted AppImage
    local found_desktop_file=""
    local squashfs_root="${extract_dir}/squashfs-root"

    if [[ -d "$squashfs_root" ]]; then
        found_desktop_file=$(find "$squashfs_root" -name "*.desktop" | head -n 1)

        if [[ -n "$found_desktop_file" ]]; then
            log -i "Found desktop file: $found_desktop_file"

            # Update the Exec entry to point to our AppImage
            sed -i "s|^Exec=.*|Exec=${appimage_path} %F|" "$found_desktop_file"

            # Store the location of the found desktop file
            desktop_path="$found_desktop_file"
            return 0
        fi
    fi

    # No desktop file found, create one
    log -i "No desktop file found in AppImage, creating one"
    if ! _create_desktop_file "$app_name" "$app_dir" "application-x-executable" "$launcher_path"; then
        log -e "Failed to create desktop file"
        return 1
    fi

    return 0
}

# Function: _create_symlinks
# Description: Creates symlinks for AppImage installation
# Parameters:
#   - app_name: Name of the application
# Returns:
#   - 0 if successful, 1 otherwise
function _create_symlinks() {
    local app_name="$1"

    # Ensure paths are set
    if [[ -z "$launcher_symlink" || -z "$desktop_symlink" ]]; then
        _setup_appimage_paths "$app_name"
    fi

    # Create command launcher symlink
    log -i "Creating command launcher symlink"
    ln -sf "$launcher_path" "$launcher_symlink"

    # Create desktop file symlink
    log -i "Creating desktop file symlink"
    ln -sf "$desktop_path" "$desktop_symlink"
    log -i "Desktop file symlinked to $desktop_symlink"

    log -i "Symlinks created for $app_name"

    return 0
}

# Function: _remove_symlinks
# Description: Removes symlinks for AppImage installation
# Parameters:
#   - app_name: Name of the application
# Returns:
#   - 0 if successful, 1 otherwise
function _remove_symlinks() {
    local app_name="$1"

    # Ensure paths are set
    if [[ -z "$launcher_symlink" || -z "$desktop_symlink" ]]; then
        _setup_appimage_paths "$app_name"
    fi

    # Remove symlinks
    if [[ -L "$launcher_symlink" ]]; then
        log -i "Removing launcher symlink: $launcher_symlink"
        rm -f "$launcher_symlink"
    fi

    if [[ -L "$desktop_symlink" ]]; then
        log -i "Removing desktop file symlink: $desktop_symlink"
        rm -f "$desktop_symlink"
    fi

    log -i "Symlinks removed for $app_name"

    return 0
}

# Function: _install_appimage
# Description: Main installation function that orchestrates the AppImage installation process
# Parameters:
#   - app_name: Name of the application
#   - appimage_url: URL to download the AppImage from
# Returns:
#   - 0 if successful, 1 otherwise
function _install_appimage() {
    local app_name="$1"
    local appimage_url="$2"

    log -i "Installing $app_name from $appimage_url"

    # Set up paths
    _setup_appimage_paths "$app_name"

    # Ensure necessary directories exist
    ensure_directory "$appimages_dir"
    ensure_directory "$app_dir"
    ensure_directory "$local_bin_dir"
    ensure_directory "$applications_dir"

    # Download the AppImage
    local downloaded_appimage_path
    if ! downloaded_appimage_path=$(_download_appimage "$app_name" "$appimage_url" "$app_dir"); then
        return 1
    fi

    # Create extract directory
    local extract_dir="${app_dir}/extracted"
    ensure_directory "$extract_dir"

    # Extract AppImage contents
    if ! _extract_appimage_content "$downloaded_appimage_path" "$extract_dir"; then
        return 1
    fi

    # Create launcher script
    if ! _create_launcher_script "$app_name" "$app_dir" "$downloaded_appimage_path"; then
        return 1
    fi

    # Ensure desktop file exists
    if ! _ensure_desktop_file "$app_name" "$downloaded_appimage_path" "$extract_dir"; then
        return 1
    fi

    # Create symlinks
    if ! _create_symlinks "$app_name"; then
        return 1
    fi

    log -s "$app_name has been successfully installed"
    log -i "You can run it by typing: $app_name"
    log -i "To uninstall, run: appimage-util -u $app_name"

    return 0
}

# Function: _uninstall_appimage
# Description: Removes AppImage installation, including symlinks and application directory
# Parameters:
#   - app_name: Name of the application
# Returns:
#   - 0 if successful, 1 otherwise
function _uninstall_appimage() {
    local app_name="$1"

    # Set up paths
    _setup_appimage_paths "$app_name"

    log -i "Uninstalling $app_name"

    # Check if app directory exists
    if [[ ! -d "$app_dir" ]]; then
        log -e "Application directory not found: $app_dir"
        return 1
    fi

    # Remove all symlinks
    _remove_symlinks "$app_name"

    # Ask for confirmation before removing app directory
    log -i "Do you want to completely remove the AppImage and all associated files? (y/N): "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        log -i "Removing application directory: $app_dir"
        rm -rf "$app_dir"
        log -s "$app_name has been completely uninstalled"
    else
        log -i "Symlinks removed. The application directory remains at: $app_dir"
        log -i "To complete uninstallation, delete this directory manually when ready."
    fi

    return 0
}

# Function: _main
# Description: Main entry point that processes arguments and calls appropriate functions
# Parameters:
#   - $@: All command-line arguments
# Returns:
#   - Exit status of the called function
function _main() {
    if ! _parse_arguments "$@"; then
        echo "Usage: appimage-util [-i|-u] <app-name> [appimage-url]"
        echo "Try 'appimage-util --help' for more information."
        return 1
    fi

    case "$APPIMAGE_ACTION" in
        "install")
            _install_appimage "$APPIMAGE_APP_NAME" "$APPIMAGE_URL"
            ;;
        "uninstall")
            _uninstall_appimage "$APPIMAGE_APP_NAME"
            ;;
        *)
            log -e "Unknown action: $APPIMAGE_ACTION"
            return 1
            ;;
    esac

    return $?
}

_main "$@"
exit $?
