#!/usr/bin/env zsh

source "$SCRIPT_FNS/log.zsh"

function _parse_arguments() {
    log "Parsing arguments"
    local prefix=$1

    shift # Remove the prefix argument

    local _restore=false
    local _backup_all=false
    local _custom_backup_dir=""
    local _custom_backup_name=""
    local _use_timestamp=false
    local _restore_file=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -r | --restore)
                _restore=true
                shift
                # optional restore file path
                if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
                    _restore_file="$1"
                    shift
                fi
                ;;
            -a | --all)
                _backup_all=true
                shift
                ;;
            -f | --file-dir)
                shift
                if [[ $# -gt 0 && "$1" != -* ]]; then
                    _custom_backup_dir="$1"
                    shift
                else
                    log -e "Error: -f|--file-dir option requires a directory path argument"
                    return 1
                fi
                ;;
            -n | --name)
                shift
                if [[ $# -gt 0 && "$1" != -* ]]; then
                    _custom_backup_name="$1"
                    shift
                else
                    log -e "Error: -n|--name option requires a name argument"
                    return 1
                fi
                ;;
            -t | --timestamp)
                _use_timestamp=true
                shift
                ;;
            *)
                # Skip unrecognized options
                shift
                ;;
        esac
    done

    # Set the variables using the prefix
    eval "${prefix}_restore=$_restore"
    eval "${prefix}_backup_all=$_backup_all"
    eval "${prefix}_custom_backup_dir=$_custom_backup_dir"
    eval "${prefix}_custom_backup_name=$_custom_backup_name"
    eval "${prefix}_use_timestamp=$_use_timestamp"
    eval "${prefix}_restore_file=$_restore_file"

    return 0
}

# Setup backup variables
function _setup_backup_variables() {
    log "Setting up variables"
    local backup_all="$1"
    local custom_backup_dir="$2"
    local custom_backup_name="$3"
    local use_timestamp="$4"
    local prefix="$5"

    local backup_suffix=""
    [[ "$backup_all" == true ]] && backup_suffix="-complete"
    local backup_base_name="tagstudio-backup"

    # Use custom backup name if provided
    [[ -n "$custom_backup_name" ]] && backup_base_name="$custom_backup_name"

    # Add timestamp if requested
    if [[ "$use_timestamp" == true ]]; then
        local timestamp=$(date "+%Y:%m:%d:%H:%M:%S")
        backup_suffix="${backup_suffix}-${timestamp}"
    fi

    # Determine backup directory - fail if neither custom nor environment directory is available
    local _backup_dir
    if [[ -n "$custom_backup_dir" ]]; then
        _backup_dir="$custom_backup_dir"
    elif [[ -n "$SYNCED_BACKUP_DIR" ]]; then
        _backup_dir="$SYNCED_BACKUP_DIR"
    else
        log -e "Error: No backup directory specified. Either set SYNCED_BACKUP_DIR environment variable or use -f|--file-dir option."
        return 1
    fi

    log "Using backup directory: $_backup_dir"
    ensure_directory "$_backup_dir"
    if [ $? -ne 0 ]; then
        log -e "Failed to ensure backup directory exists: $_backup_dir"
        return 1
    fi

    local _backup_file_name="$_backup_dir/${backup_base_name}${backup_suffix}.zip"

    # Set the variables using the prefix
    eval "${prefix}_backup_file_name=$_backup_file_name"
    eval "${prefix}_backup_dir=$_backup_dir"

    return 0
}

# List available backups in a directory
function _list_available_backups() {
    local backup_dir="$1"

    log "Available backups in $backup_dir:"

    # Check if backup directory exists
    if [[ ! -d "$backup_dir" ]]; then
        log -e "Backup directory $backup_dir does not exist"
        return 1
    fi

    # List all zip files in the backup directory
    local backup_files=($(find "$backup_dir" -name "*.zip" -type f 2> /dev/null))

    if [[ ${#backup_files[@]} -eq 0 ]]; then
        log -e "No backup files found in $backup_dir"
        return 1
    fi

    log "Found ${#backup_files[@]} backup files:"
    for file in "${backup_files[@]}"; do
        echo "  $(basename "$file")"
    done

    log -e "Please specify a backup file to restore using: tagstudio-backup -r /path/to/backup.zip"
    return 1
}

# Handle the restore operation
function _handle_restore_operation() {
    local backup_file_name="$1"
    local backup_dir="$2"
    local target_dir="$3"

    log "Restore mode: checking for backup"

    # Check if backup exists
    if [[ ! -f "$backup_file_name" ]]; then
        log -e "No backup file found at $backup_file_name, cannot restore."
        _list_available_backups "$backup_dir"
        return 1
    fi

    log "Restoring TagStudio from $backup_file_name to $target_dir"

    # Restore the backup
    ensure_directory "$target_dir"
    if [ $? -ne 0 ]; then
        log -e "Failed to ensure target directory exists: $target_dir"
        return 1
    fi

    # Extract the backup to the target directory
    log "Extracting backup archive to $target_dir"
    unzip -q "$backup_file_name" -d "$target_dir"
    if [ $? -ne 0 ]; then
        log -e "Failed to restore TagStudio from \"$backup_file_name\""
        return 1
    fi

    log "Restore completed"
    echo "$backup_file_name"
    return 0
}

# Handle the backup operation
function _handle_backup_operation() {
    local backup_file_name="$1"
    local backup_all="$2"
    local target_directory="$3"

    log "Starting backup operation"

    # Save original directory before changing it
    local original_dir="$(pwd)"
    cd "$target_directory" || {
        log -e "Failed to change directory to $target_directory"
        return 1
    }

    local temp_backup_file="/tmp/$(basename "$backup_file_name")"
    log "Backing up TagStudio from $(pwd) to $temp_backup_file"

    # Create backup archive
    if [[ "$backup_all" == true ]]; then
        # Backup everything with no exclusions
        log "Creating complete backup (no exclusions)"
        zip -qr "$temp_backup_file" .
    else
        # Regular backup with exclusions (exclude installed app payload)
        log "Creating regular backup (with exclusions)"
        zip -qr "$temp_backup_file" . -x "app/*" -x "*.tar.gz" -x "*.zip"
    fi

    if [ $? -ne 0 ]; then
        cd "$original_dir"
        [ -f "$temp_backup_file" ] && rm "$temp_backup_file"
        log -e "Failed to backup TagStudio"
        return 1
    fi

    # Finalize backup file
    log "Moving temporary backup file to final location: $temp_backup_file -> $backup_file_name"
    [ -f "$backup_file_name" ] && rm "$backup_file_name"
    mv "$temp_backup_file" "$backup_file_name"

    # Restore original directory
    cd "$original_dir"

    log "Backup completed"
    echo "$backup_file_name"
    return 0
}

# Main function
function _main() {
    # Variables for command line options
    local opts_restore=false
    local opts_backup_all=false
    local opts_custom_backup_dir=""
    local opts_custom_backup_name=""
    local opts_use_timestamp=false
    local opts_restore_file=""

    # Parse arguments
    _parse_arguments "opts" "$@"
    if [ $? -ne 0 ]; then
        return 1
    fi

    # Variables for backup paths
    local backup_backup_file_name=""
    local backup_backup_dir=""

    # Setup backup variables
    _setup_backup_variables "$opts_backup_all" "$opts_custom_backup_dir" "$opts_custom_backup_name" "$opts_use_timestamp" "backup"
    if [ $? -ne 0 ]; then
        return 1
    fi

    # Set the main TagStudio directory
    local main_directory="$HOME/.tagstudio"

    # Handle restore or backup operation
    if [[ "$opts_restore" == true ]]; then
        _handle_restore_operation "$opts_restore_file" "$backup_backup_dir" "$main_directory"
        return $?
    else
        _handle_backup_operation "$backup_backup_file_name" "$opts_backup_all" "$main_directory"
        return $?
    fi
}

_main "$@"
exit $?
