#!/usr/bin/env zsh

source "$SCRIPT_FNS/get_github_release_asset_url.zsh"
source "$SCRIPT_FNS/download_and_extract.zsh"
source "$SCRIPT_FNS/log.zsh"

function _download_asset_and_install_to() {
    local install_directory="$1"

    # Try AppImage first (preferred for simplicity)
    local appimage_url=$(get_github_release_asset_url "TagStudioDev/TagStudio" "AppImage$")
    if [[ -n "$appimage_url" ]]; then
        log "Found AppImage URL: $appimage_url"
        ensure_directory "$install_directory"
        local appimage_path="$install_directory/TagStudio.AppImage"
        log "Downloading AppImage to $appimage_path"
        if ! curl -L -s "$appimage_url" -o "$appimage_path"; then
            log -e "Failed to download AppImage"
            return 1
        fi
        chmod +x "$appimage_path" || return 1
        echo "$appimage_path"
        return 0
    fi

    # Fallback to archives: prefer tar.xz, then tar.gz, then zip
    local tarxz_url=$(get_github_release_asset_url "TagStudioDev/TagStudio" "linux.*\\.tar\\.xz$")
    local targz_url=$(get_github_release_asset_url "TagStudioDev/TagStudio" "linux.*\\.tar\\.gz$")
    local zip_url=$(get_github_release_asset_url "TagStudioDev/TagStudio" "linux.*\\.zip$")

    local url
    local type
    if [[ -n "$tarxz_url" ]]; then
        url="$tarxz_url"
        type="tar.xz"
    elif [[ -n "$targz_url" ]]; then
        url="$targz_url"
        type="tar.gz"
    elif [[ -n "$zip_url" ]]; then
        url="$zip_url"
        type="zip"
    else
        log -e "Could not find a suitable Linux asset in latest release"
        return 1
    fi

    log "Downloading and extracting archive ($type) from: $url"
    ensure_directory "$install_directory"
    if ! download_and_extract "$url" "$install_directory" "$type"; then
        log -e "Failed to download and extract TagStudio archive"
        return 1
    fi

    # Best-effort: if a file named TagStudio or tagstudio exists, use it
    local candidate
    for candidate in "$install_directory/TagStudio" "$install_directory/tagstudio"; do
        if [[ -x "$candidate" ]]; then
            echo "$candidate"
            return 0
        fi
    done

    # Otherwise, search for executable AppImage-like or launcher
    candidate=$(find "$install_directory" -maxdepth 2 -type f -executable \( -name "TagStudio*" -o -name "tagstudio*" -o -name "*.AppImage" \) | head -n 1)
    if [[ -n "$candidate" ]]; then
        echo "$candidate"
        return 0
    fi

    log -e "Installed files but could not locate TagStudio executable"
    return 1
}

function _main() {
    # prepare directories
    # -------------------

    log "prepare directories"
    local main_directory="$HOME/.tagstudio"
    local install_directory="$main_directory/app"

    ensure_directory "$main_directory"
    ensure_directory "$install_directory"

    # Create backup of existing installation
    # --------------------------------------

    log "Create backup of existing TagStudio installation in: $install_directory"
    if [[ -n $(ls -A "$install_directory" 2> /dev/null) ]]; then
        log "Backing up existing TagStudio installation"
        local backup_file=$(tagstudio-backup -t -n "tagstudio-backup-before-installation")
        if [ $? -ne 0 ]; then
            log -e "Backup failed, aborting installation"
            return 1
        fi
        log "Created backup at: $backup_file"
        log "Clearing install directory"
        rm -rf "$install_directory"
        ensure_directory "$install_directory"
    else
        log "No existing TagStudio installation found, proceeding with installation."
    fi

    # Download latest TagStudio release
    # ---------------------------------

    log "Fetching latest TagStudio release"
    local executable_path
    executable_path=$(_download_asset_and_install_to "$install_directory")
    local rc=$?
    if [[ $rc -ne 0 || -z "$executable_path" ]]; then
        log -e "Failed to install TagStudio from release assets"
        # Attempt restore
        local restored_file=$(tagstudio-backup -r)
        if [ $? -eq 0 ]; then
            log "Successfully restored from backup: $restored_file"
        else
            log -e "Failed to restore from backup"
        fi
        return 1
    fi

    log "Executable resolved at: $executable_path"

    # Register tagstudio executable
    # -----------------------------

    log "Registering TagStudio executable"
    local local_bin_dir="$HOME/.local/bin"
    ensure_directory "$local_bin_dir"
    [[ -L "$local_bin_dir/tagstudio" ]] && rm -f "$local_bin_dir/tagstudio"
    ln -sf "$executable_path" "$local_bin_dir/tagstudio"

    # Create desktop icon
    # -------------------

    log "Creating desktop icon for TagStudio"
    ensure_directory "$HOME/.local/share/applications"
    # Try to detect an icon inside install directory
    local icon_path
    icon_path=$(find "$install_directory" -maxdepth 3 -type f \( -iname "*tagstudio*.png" -o -iname "*tagstudio*.svg" -o -iname "icon.png" -o -iname "logo.png" \) | head -n 1)
    [[ -z "$icon_path" ]] && icon_path=tagstudio
    tee "$HOME/.local/share/applications/tagstudio.desktop" > /dev/null << EOF
[Desktop Entry]
Type=Application
Version=1.0
Name=TagStudio
Comment=Open-source tagging and media organization tool
Exec=$local_bin_dir/tagstudio
Terminal=false
Icon=$icon_path
Categories=Utility;Graphics;
Keywords=Tag;Media;Organizer;Library
MimeType=
StartupNotify=true
EOF

    log "TagStudio installation process completed"
}

_main "$@"
exit $?
