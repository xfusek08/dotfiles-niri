#!/usr/bin/env zsh

source "$SCRIPT_FNS/get_github_release_asset_url.zsh"
source "$SCRIPT_FNS/log.zsh"

# Common: prepare Sine installer and expose sine_installer_path (and sine_temp_dir)
function _prepare_sine_installer() {
    # Global/shared variables
    typeset -g sine_temp_dir
    typeset -g sine_installer_path
    
    # Ensure temp dir
    if [[ -z "$sine_temp_dir" || ! -d "$sine_temp_dir" ]]; then
        sine_temp_dir="$(mktemp -d)"
    fi
    
    sine_installer_path="$sine_temp_dir/sine-linux-x64"
    if [[ -x "$sine_installer_path" ]]; then
        log "Sine installer already prepared at: $sine_installer_path"
        return 0
    fi
    
    # Fetch latest installer
    local sine_url
    sine_url=$(get_github_release_asset_url "CosmoCreeper/Sine" "sine-linux-x64")
    if [[ -z "$sine_url" ]]; then
        log "Failed to find Sine installer download URL"
        return 1
    fi
    
    log "Downloading Sine installer to $sine_installer_path"
    if ! curl -L -s "$sine_url" -o "$sine_installer_path"; then
        log "Failed to download Sine installer"
        return 1
    fi
    
    chmod +x "$sine_installer_path" || {
        log "Failed to mark Sine installer as executable"
        return 1
    }
    
    log "Sine installer prepared"
    return 0
}

# Common: cleanup temp installer
function _cleanup_sine_installer() {
    [[ -n "$sine_installer_path" && -f "$sine_installer_path" ]] && rm -f "$sine_installer_path"
    [[ -n "$sine_temp_dir" && -d "$sine_temp_dir" ]] && rmdir "$sine_temp_dir" 2>/dev/null
}

function _usage() {
    echo "Usage: $(basename "$0") [install|uninstall] [--main-dir DIR] [--install-dir DIR]"
}

function _install_sine() {
    local main_directory="$1"
    local install_directory="$2"
    
    log "Preparing to install Sine for Zen Browser"
    ensure_directory "$main_directory"
    ensure_directory "$install_directory"
    
    # Create backup before Sine installation
    log "Creating backup before Sine installation"
    local sine_backup_file=$(zen-browser-backup -t -n "zen-browser-backup-before-sine-installation")
    if [ $? -ne 0 ]; then
        log "Sine pre-installation backup failed, aborting Sine installation"
        return 1
    else
        log "Created pre-Sine backup at: $sine_backup_file"
    fi
    
    # Prepare installer (shared)
    if ! _prepare_sine_installer; then
        log "Skipping Sine installation due to failed installer preparation"
        return 1
    fi
    
    # Create a folder in main_directory for the last prompt
    local sine_folder="$main_directory/sine_data"
    ensure_directory "$sine_folder"
    
    # Run installer with automated inputs (same flow as before)
    log "Running Sine installer with automated inputs"
    {
        echo "2"
        echo "1"
        echo "$install_directory"
        echo "asd"
        echo "$main_directory"
        echo "3" # 3 should be read by user from the profiles ini file.
        echo "no"
    } | sudo "$sine_installer_path"
    
    local sine_exit_code=$?
    if [ $sine_exit_code -eq 0 ]; then
        log "Sine installation completed successfully"
    else
        log "Sine installation exited with code $sine_exit_code"
    fi
    
    # Cleanup (shared)
    log "Cleaning up Sine installer"
    _cleanup_sine_installer
    
    return 0
}

function _uninstall_sine() {
    local main_directory="$1"
    local install_directory="$2"
    
    # Prepare installer (shared) â€” needed by future uninstall flow
    if ! _prepare_sine_installer; then
        log "Skipping Sine uninstall prep due to failed installer preparation"
        return 1
    fi
    
    {
        echo "2"
        echo "1"
        echo "$install_directory"
        echo "asd"
        echo "$main_directory"
        echo "3" # 3 should be read by user from the profiles ini file.
        echo "yes"
    } | sudo "$sine_installer_path" --help
    
    # Cleanup (shared)
    log "Cleaning up Sine installer"
    _cleanup_sine_installer
    return 0
}

function _main() {
    if [[ $# -lt 1 ]]; then
        _usage
        return 1
    fi
    
    local action="$1"
    shift
    
    local main_directory="$HOME/.zen"
    local install_directory="$main_directory/zen"
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -m|--main-dir)
                shift
                [[ $# -gt 0 ]] || { log -e "--main-dir requires a value"; return 1; }
                main_directory="$1"
                shift
            ;;
            -i|--install-dir)
                shift
                [[ $# -gt 0 ]] || { log -e "--install-dir requires a value"; return 1; }
                install_directory="$1"
                shift
            ;;
            *)
                # Ignore unknown options for now
                shift
            ;;
        esac
    done
    
    case "$action" in
        install)
            _install_sine "$main_directory" "$install_directory"
            return $?
        ;;
        uninstall)
            _uninstall_sine "$main_directory" "$install_directory"
            return $?
        ;;
        *)
            _usage
            return 1
        ;;
    esac
}

_main "$@"
exit $?
